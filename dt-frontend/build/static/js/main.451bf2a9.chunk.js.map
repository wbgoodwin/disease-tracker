{"version":3,"sources":["components/login.tsx","views/splash.tsx","components/navbar.tsx","views/signInGuest.tsx","components/newGuestForm.tsx","views/newGuest.tsx","views/admin/manageEmployees.tsx","views/admin/reports.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","employeeLogin","username","password","useState","isLoggingIn","setLoggingIn","useEffect","console","log","window","location","href","className","Form","Group","controlId","Label","Control","placeholder","defaultValue","type","to","Splash","NavigationBar","Navbar","bg","variant","Brand","Nav","Link","NavDropdown","title","id","Item","SignInGuest","NewGuestForm","validated","setValidated","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","Row","as","Col","md","required","Feedback","Check","label","feedback","Button","NewGuest","ManageEmployees","Reports","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUA0DeA,EAlDD,WACV,IAAMC,EAAgB,CAClBC,SAAU,GACVC,SAAU,IAHE,EAMoBC,oBAAS,GAN7B,mBAMTC,EANS,KAMIC,EANJ,KAqBhB,OAVAC,qBAAU,WACFF,IACAG,QAAQC,IAAIR,GACZS,OAAOC,SAASC,KAAO,WAEvBN,GAAa,MAElB,CAACD,IAIA,yBAAKQ,UAAU,mBACX,yBAAKA,UAAU,SAEf,kBAACC,EAAA,EAAD,CAAMD,UAAU,cACZ,uDACA,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBAClB,kBAACF,EAAA,EAAKG,MAAN,mBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,YAAY,iBAAiBC,aAAcnB,EAAcC,YAG3E,kBAACY,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,mBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,KAAK,WAAWF,YAAY,WAAWC,aAAcnB,EAAcE,YAGrF,kBAAC,IAAD,CAAMmB,GAAG,WAAWT,UAAU,qBAAqBR,EAAc,mBAAgB,aChClFkB,EATA,WACX,OACI,yBAAKV,UAAU,UACX,kBAAC,EAAD,Q,wBCyBGW,G,MAvBO,WAClB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,YAAYC,QAAQ,QAC3B,kBAACF,EAAA,EAAOG,MAAR,CAAchB,KAAK,YAAnB,UACA,kBAACiB,EAAA,EAAD,CAAKhB,UAAU,WACX,kBAACgB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,YAAf,iBACA,kBAACiB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,aAAf,kBACA,kBAACiB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,aAAf,iBACQ,kBAACmB,EAAA,EAAD,CAAaC,MAAM,cAAcC,GAAG,2BACxC,kBAACF,EAAA,EAAYG,KAAb,CAAkBtB,KAAK,qBAAvB,qBACA,kBAACmB,EAAA,EAAYG,KAAb,CAAkBtB,KAAK,oBAAvB,oBACA,kBAACmB,EAAA,EAAYG,KAAb,CAAkBtB,KAAK,oBAAvB,qBAGR,kBAACiB,EAAA,EAAD,CAAKhB,UAAU,WACX,kBAACgB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,WAAf,cCdDuB,EANK,WAClB,OACE,kBAAC,EAAD,O,gBCuEWC,EAtEM,WAAO,IAAD,EACWhC,oBAAS,GADpB,mBAChBiC,EADgB,KACLC,EADK,KAYvB,OACI,kBAACxB,EAAA,EAAD,CAAMyB,YAAU,EAACF,UAAWA,EAAWG,SAXtB,SAACC,IAEW,IADhBA,EAAMC,cACVC,kBACLF,EAAMG,iBACNH,EAAMI,mBAGVP,GAAa,KAKT,kBAACxB,EAAA,EAAKgC,IAAN,KACI,kBAAChC,EAAA,EAAKC,MAAN,CAAYgC,GAAIC,IAAKC,GAAG,IAAIjC,UAAU,sBAClC,kBAACF,EAAA,EAAKG,MAAN,mBACA,kBAACH,EAAA,EAAKI,QAAN,CACIgC,UAAQ,EACR7B,KAAK,OACLF,YAAY,eAEhB,kBAACL,EAAA,EAAKI,QAAQiC,SAAd,qBAEJ,kBAACrC,EAAA,EAAKC,MAAN,CAAYgC,GAAIC,IAAKC,GAAG,IAAIjC,UAAU,sBAClC,kBAACF,EAAA,EAAKG,MAAN,kBACA,kBAACH,EAAA,EAAKI,QAAN,CACIgC,UAAQ,EACR7B,KAAK,OACLF,YAAY,cAEhB,kBAACL,EAAA,EAAKI,QAAQiC,SAAd,sBAGR,kBAACrC,EAAA,EAAKgC,IAAN,KACI,kBAAChC,EAAA,EAAKC,MAAN,CAAYgC,GAAIC,IAAKC,GAAG,IAAIjC,UAAU,sBAClC,kBAACF,EAAA,EAAKG,MAAN,aACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,KAAK,OAAOF,YAAY,SACtC,kBAACL,EAAA,EAAKI,QAAQiC,SAAd,CAAuB9B,KAAK,WAA5B,iCAIJ,kBAACP,EAAA,EAAKC,MAAN,CAAYgC,GAAIC,IAAKC,GAAG,IAAIjC,UAAU,sBAClC,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,KAAK,OAAOF,YAAY,UACtC,kBAACL,EAAA,EAAKI,QAAQiC,SAAd,CAAuB9B,KAAK,WAA5B,kCAIJ,kBAACP,EAAA,EAAKC,MAAN,CAAYgC,GAAIC,IAAKC,GAAG,IAAIjC,UAAU,sBAClC,kBAACF,EAAA,EAAKG,MAAN,YACA,kBAACH,EAAA,EAAKI,QAAN,CAAcG,KAAK,OAAOF,YAAY,MAAM+B,UAAQ,IACpD,kBAACpC,EAAA,EAAKI,QAAQiC,SAAd,CAAuB9B,KAAK,WAA5B,iCAKR,kBAACP,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKsC,MAAN,CACIF,UAAQ,EACRG,MAAM,gCACNC,SAAS,uCAGjB,kBAACC,EAAA,EAAD,CAAQlC,KAAK,SAASM,QAAQ,aAA9B,sBChDG6B,G,YAfE,WACb,OACI,yBAAK3C,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,0BACX,6BACA,2DACA,6BACA,kBAAC,EAAD,UCED4C,EAVS,WACpB,OACI,6BACI,kBAAC,EAAD,QCCGC,EARC,WACZ,OACI,6BACI,kBAAC,EAAD,Q,QCmBGC,EAhBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,UAAUC,UAAWvC,IACvC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,WAAWC,UAAW3B,IACxC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,eAAeC,UAAW3B,IAC5C,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,YAAYC,UAAWN,IACzC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,mBAAmBC,UAAWL,IAChD,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,oBAAoBC,UAAWJ,OCRrCK,QACW,cAA7BrD,OAAOC,SAASqD,UAEe,UAA7BtD,OAAOC,SAASqD,UAEhBtD,OAAOC,SAASqD,SAASC,MACvB,2D,MCANC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.451bf2a9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './styles/login.css'\n//import { login } from '../accountManagement';\nimport { AUTH_TOKEN } from '../constants'\nimport { Link } from 'react-router-dom';\n\nconst Login = () => {\n    const employeeLogin = {\n        username: \"\",\n        password: \"\"\n    };\n\n    const [isLoggingIn, setLoggingIn] = useState(false);\n\n    const handleSubmit = () => console.log(employeeLogin);\n\n\n    useEffect(() => {\n        if (isLoggingIn) {\n            console.log(employeeLogin);\n            window.location.href = \"/Landing\"\n            //login(\"Alice\");\n            setLoggingIn(false);\n        }\n    }, [isLoggingIn]);\n\n\n    return (\n        <div className=\"login-container\">\n            <div className=\"left\" />\n\n            <Form className=\"login-form\">\n                <h2>Enter Login Information</h2>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Username: </Form.Label>\n                    <Form.Control placeholder=\"Enter username\" defaultValue={employeeLogin.username} />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password: </Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Password\" defaultValue={employeeLogin.password} />\n                </Form.Group>\n\n                <Link to=\"/Landing\" className=\"btn btn-secondary\">{isLoggingIn ? 'Logging in…' : 'Submit'}</Link>\n                {/* <Button variant=\"secondary\"\n                    type=\"submit\"\n                    disabled={isLoggingIn}\n                    onClick={handleSubmit}>\n                    {isLoggingIn ? 'Logging in…' : 'Submit'}\n                </Button> */}\n            </Form>\n        </div >\n    );\n}\n\n\nexport default Login;\n","import React from 'react';\nimport Login from '../components/login'\n\n\nconst Splash = () => {\n    return (\n        <div className=\"splash\">\n            <Login />\n        </div>\n    );\n}\n\n\nexport default Splash;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport './styles/navbar.css'\n\n\n\n\nconst NavigationBar = () => {\n    return (\n        <Navbar bg=\"secondary\" variant=\"dark\">\n            <Navbar.Brand href=\"/Landing\">Navbar</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/Landing\">Sign In Guest</Nav.Link>\n                <Nav.Link href=\"#features\">Record Service</Nav.Link>\n                <Nav.Link href=\"/NewGuest\">Add New Guest</Nav.Link>\n                {true ? <NavDropdown title=\"Admin Pages\" id=\"collasible-nav-dropdown\">\n                    <NavDropdown.Item href=\"/ReportGeneration\">Report Generation</NavDropdown.Item>\n                    <NavDropdown.Item href=\"/ManageEmployees\">Manage Employees</NavDropdown.Item>\n                    <NavDropdown.Item href=\"/ManageEmployees\">Manage Services</NavDropdown.Item>\n                </NavDropdown> : null}\n            </Nav>\n            <Nav className=\"mr-sm-2\">\n                <Nav.Link href=\"/Splash\">Logout</Nav.Link>\n            </Nav>\n        </Navbar>\n\n    );\n}\n\n\nexport default NavigationBar;","import React from 'react';\nimport NavigationBar from '../components/navbar'\n\n\nconst SignInGuest = () => {\n  return (\n    <NavigationBar />\n  );\n}\n\nexport default SignInGuest;\n","import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\n\n\nconst NewGuestForm = () => {\n    const [validated, setValidated] = useState(false);\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        setValidated(true);\n    };\n\n    return (\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n            <Form.Row>\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                    <Form.Label>First name</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"First name\"\n                    />\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                    <Form.Label>Last name</Form.Label>\n                    <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"Last name\"\n                    />\n                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                </Form.Group>\n            </Form.Row>\n            <Form.Row>\n                <Form.Group as={Col} md=\"6\" controlId=\"validationCustom03\">\n                    <Form.Label>City</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"City\" />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid city.\n          </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col} md=\"3\" controlId=\"validationCustom04\">\n                    <Form.Label>State</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"State\" />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid state.\n          </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col} md=\"3\" controlId=\"validationCustom05\">\n                    <Form.Label>Zip</Form.Label>\n                    <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid zip.\n          </Form.Control.Feedback>\n                </Form.Group>\n            </Form.Row>\n            <Form.Group>\n                <Form.Check\n                    required\n                    label=\"Agree to terms and conditions\"\n                    feedback=\"You must agree before submitting.\"\n                />\n            </Form.Group>\n            <Button type=\"submit\" variant=\"secondary\">Create New Guest</Button>\n        </Form>\n    );\n}\n\n\nexport default NewGuestForm;","import React from 'react';\nimport NewGuestForm from \"../components/newGuestForm\"\nimport NavigationBar from \"../components/navbar\"\nimport \"./styles/newGuest.css\"\nimport \"../App.css\"\n\n\n\nconst NewGuest = () => {\n    return (\n        <div className=\"App\">\n            <NavigationBar />\n            <div className=\"create-guest-container\">\n                <br />\n                <h2>Enter New Guest Information</h2>\n                <br />\n                <NewGuestForm />\n            </div>\n        </div>\n    );\n}\n\n\nexport default NewGuest;","import React from 'react';\nimport NavigationBar from \"../../components/navbar\"\n\n\n// I want to be able to find employees and edit their information. possibly a modal\n\n//\n\nconst ManageEmployees = () => {\n    return (\n        <div>\n            <NavigationBar />\n            \n\n        </div>\n    );\n}\n\nexport default ManageEmployees;\n","import React from 'react';\nimport NavigationBar from \"../../components/navbar\"\n\n\nconst Reports = () => {\n    return (\n        <div>\n            <NavigationBar />\n        </div>\n    );\n}\n\nexport default Reports;\n","import React from 'react';\nimport Splash from './views/splash';\nimport SignInGuest from './views/signInGuest';\nimport NewGuest from './views/newGuest';\nimport ManageEmployees from './views/admin/manageEmployees';\nimport Reports from './views/admin/reports';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/' component={Splash}></Route>\n        <Route exact path='/Splash' component={Splash}></Route>\n        <Route exact path='/Landing' component={SignInGuest}></Route>\n        <Route exact path='/SignInGuest' component={SignInGuest}></Route>\n        <Route exact path='/NewGuest' component={NewGuest}></Route>\n        <Route exact path='/ManageEmployees' component={ManageEmployees}></Route>\n        <Route exact path='/ReportGeneration' component={Reports}></Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nlet client;\nif (process.env.NODE_ENV === 'production') {\n\n}\nelse {\n  /* client = new ApolloClient({\n    link: new HttpLink({ uri: \"http://localhost:4000/graphql\" })\n  }); */\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}